// Package character_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package character_api

import (
	"github.com/gin-gonic/gin"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// CharacterInfo defines model for CharacterInfo.
type CharacterInfo struct {
	Class     string `json:"class"`
	GuildCode string `json:"guild_code"`
	Level     int    `json:"level"`
	Name      string `json:"name"`
	Server    string `json:"server"`
}

// CharacterResponse defines model for CharacterResponse.
type CharacterResponse struct {
	Achievements []string `json:"achievements"`
	Class        string   `json:"class"`
	GuildId      string   `json:"guild_id"`
	Level        int      `json:"level"`
	Name         string   `json:"name"`
	Server       string   `json:"server"`
}

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
}

// PostCharactersJSONRequestBody defines body for PostCharacters for application/json ContentType.
type PostCharactersJSONRequestBody = CharacterInfo

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /characters)
	GetCharacters(c *gin.Context)

	// (POST /characters)
	PostCharacters(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCharacters operation middleware
func (siw *ServerInterfaceWrapper) GetCharacters(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCharacters(c)
}

// PostCharacters operation middleware
func (siw *ServerInterfaceWrapper) PostCharacters(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCharacters(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/characters", wrapper.GetCharacters)
	router.POST(options.BaseURL+"/characters", wrapper.PostCharacters)
}
